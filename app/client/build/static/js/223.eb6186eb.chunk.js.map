{"version":3,"file":"static/js/223.eb6186eb.chunk.js","mappings":"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","sources":["globalStyles/WidgetGlobalStyles.ts","pages/Editor/RequestConfirmationModal.tsx","assets/icons/header/explorer-side-nav.svg","assets/icons/header/database-side-nav.svg","assets/icons/header/library-side-nav.svg","pages/common/SideNav.tsx","pages/utils.ts","selectors/appSettingsPaneSelectors.tsx","utils/hooks/useDynamicAppLayout.tsx","utils/hooks/useWidgetFocus/tabbable.ts","utils/hooks/useWidgetFocus/handleTab.ts","utils/hooks/useWidgetFocus/useWidgetFocus.tsx"],"sourcesContent":["import { createGlobalStyle } from \"styled-components\";\n\nexport const WidgetGlobaStyles = createGlobalStyle<{\n  primaryColor?: string;\n  fontFamily?: string;\n}>`\n    :root{\n      --wds-accent-color: ${({ primaryColor }) => primaryColor};\n      --wds-font-family: ${({ fontFamily }) =>\n        fontFamily === \"System Default\" ? \"inherit\" : fontFamily};\n    }\n  `;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { AppState } from \"@appsmith/reducers\";\nimport { Keys } from \"@blueprintjs/core\";\nimport {\n  showActionConfirmationModal,\n  cancelActionConfirmationModal,\n  acceptActionConfirmationModal,\n} from \"actions/pluginActionActions\";\nimport { DialogComponent } from \"design-system-old\";\nimport styled from \"styled-components\";\nimport { Button, Category, Size } from \"design-system-old\";\nimport {\n  createMessage,\n  QUERY_CONFIRMATION_MODAL_MESSAGE,\n} from \"@appsmith/constants/messages\";\nimport { ModalInfo } from \"reducers/uiReducers/modalActionReducer\";\n\ntype Props = {\n  modals: ModalInfo[];\n  dispatch: any;\n};\n\nconst ModalBody = styled.div`\n  padding-bottom: 20px;\n`;\n\nconst ModalFooter = styled.div`\n  display: flex;\n  justify-content: flex-end;\n\n  button {\n    margin-left: 12px;\n  }\n`;\n\nclass RequestConfirmationModal extends React.Component<Props> {\n  addEventListener = () => {\n    document.addEventListener(\"keydown\", this.onKeyUp);\n  };\n\n  removeEventListener = () => {\n    document.removeEventListener(\"keydown\", this.onKeyUp);\n  };\n\n  onKeyUp = (event: KeyboardEvent) => {\n    // Sometimes calling the shortcut keys \"Cmd + Enter\" also triggers the onConfirm function below\n    // so We check if no multiple keys are being pressed currently before executing this block of code.\n    if (!(event.metaKey || event.ctrlKey) && event.keyCode === Keys.ENTER) {\n      // please note: due to the way the state is being updated, the last action will always correspond to the right Action Modal.\n      // this is not a bug.\n      this.onConfirm(this.props.modals[this.props.modals.length - 1]);\n    }\n  };\n\n  onConfirm = (modalInfo: ModalInfo) => {\n    const { dispatch } = this.props;\n    dispatch(acceptActionConfirmationModal(modalInfo.name));\n    this.handleClose(modalInfo);\n  };\n\n  handleClose = (modalInfo: ModalInfo) => {\n    const { dispatch } = this.props;\n    dispatch(showActionConfirmationModal({ ...modalInfo, modalOpen: false }));\n    dispatch(cancelActionConfirmationModal(modalInfo.name));\n  };\n\n  componentDidUpdate() {\n    const { modals } = this.props;\n    if (!!modals) {\n      this.addEventListener();\n    } else {\n      this.removeEventListener();\n    }\n  }\n\n  render() {\n    const { dispatch, modals } = this.props;\n\n    // making sure that only modals that are set to be open are eventually opened.\n    // basically filters out modals that have already been opened and prevents it from flashing after other modals have been confirmed.\n    const modalsToBeOpened = modals.filter((modal) => modal.modalOpen === true);\n\n    return (\n      <>\n        {modalsToBeOpened.map((modalInfo: ModalInfo, index: number) => (\n          <DialogComponent\n            canEscapeKeyClose\n            canOutsideClickClose\n            isOpen={modalInfo?.modalOpen}\n            key={index}\n            maxHeight={\"80vh\"}\n            noModalBodyMarginTop\n            onClose={() => this.handleClose(modalInfo)}\n            title=\"Confirmation Dialog\"\n            width={\"580px\"}\n          >\n            <ModalBody>\n              {createMessage(QUERY_CONFIRMATION_MODAL_MESSAGE)}{\" \"}\n              <b>{modalInfo.name}</b> ?\n            </ModalBody>\n            <ModalFooter>\n              <Button\n                category={Category.secondary}\n                cypressSelector=\"t--cancel-modal-btn\"\n                onClick={() => {\n                  dispatch(cancelActionConfirmationModal(modalInfo.name));\n                  this.handleClose(modalInfo);\n                }}\n                size={Size.large}\n                tag=\"button\"\n                text=\"No\"\n                type=\"button\"\n              />\n              <Button\n                category={Category.primary}\n                cypressSelector=\"t--confirm-modal-btn\"\n                onClick={() => this.onConfirm(modalInfo)}\n                size={Size.large}\n                tag=\"button\"\n                text=\"Yes\"\n                type=\"button\"\n              />\n            </ModalFooter>\n          </DialogComponent>\n        ))}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state: AppState) => ({\n  modals: state.ui.modalAction.modals,\n});\n\nexport default connect(mapStateToProps)(RequestConfirmationModal);\n","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgExplorerSideNav(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 20,\n    viewBox: \"0 0 18 20\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M7 0C7.552 0 8 0.448 8 1V5C8 5.552 7.552 6 7 6H5V8H10V7C10 6.448 10.448 6 11 6H17C17.552 6 18 6.448 18 7V11C18 11.552 17.552 12 17 12H11C10.448 12 10 11.552 10 11V10H5V16H10V15C10 14.448 10.448 14 11 14H17C17.552 14 18 14.448 18 15V19C18 19.552 17.552 20 17 20H11C10.448 20 10 19.552 10 19V18H4C3.448 18 3 17.552 3 17V6H1C0.448 6 0 5.552 0 5V1C0 0.448 0.448 0 1 0H7ZM16 16H12V18H16V16ZM16 8H12V10H16V8ZM6 2H2V4H6V2Z\",\n    fill: \"#858282\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgExplorerSideNav);\nexport default __webpack_public_path__ + \"static/media/explorer-side-nav.9e0f636af2f96db08143ba5db4dfdf2a.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgDatabaseSideNav(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 19,\n    viewBox: \"0 0 18 19\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M2 9.5C2 9.813 2.461 10.358 3.53 10.893C4.914 11.585 6.877 12 9 12C11.123 12 13.086 11.585 14.47 10.893C15.539 10.358 16 9.813 16 9.5V7.329C14.35 8.349 11.827 9 9 9C6.173 9 3.65 8.348 2 7.329V9.5ZM16 12.329C14.35 13.349 11.827 14 9 14C6.173 14 3.65 13.348 2 12.329V14.5C2 14.813 2.461 15.358 3.53 15.893C4.914 16.585 6.877 17 9 17C11.123 17 13.086 16.585 14.47 15.893C15.539 15.358 16 14.813 16 14.5V12.329ZM0 14.5V4.5C0 2.015 4.03 0 9 0C13.97 0 18 2.015 18 4.5V14.5C18 16.985 13.97 19 9 19C4.03 19 0 16.985 0 14.5ZM9 7C11.123 7 13.086 6.585 14.47 5.893C15.539 5.358 16 4.813 16 4.5C16 4.187 15.539 3.642 14.47 3.107C13.086 2.415 11.123 2 9 2C6.877 2 4.914 2.415 3.53 3.107C2.461 3.642 2 4.187 2 4.5C2 4.813 2.461 5.358 3.53 5.893C4.914 6.585 6.877 7 9 7Z\",\n    fill: \"#858282\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgDatabaseSideNav);\nexport default __webpack_public_path__ + \"static/media/database-side-nav.815687f924038b5dd84c417656337253.svg\";\nexport { ForwardRef as ReactComponent };","var _path;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgLibrarySideNav(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: 18,\n    height: 20,\n    viewBox: \"0 0 18 20\",\n    fill: \"none\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _path || (_path = /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M0 16.5V3C0 2.20435 0.316071 1.44129 0.87868 0.87868C1.44129 0.316071 2.20435 0 3 0H17C17.2652 0 17.5196 0.105357 17.7071 0.292893C17.8946 0.48043 18 0.734784 18 1V19C18 19.2652 17.8946 19.5196 17.7071 19.7071C17.5196 19.8946 17.2652 20 17 20H3.5C2.57174 20 1.6815 19.6313 1.02513 18.9749C0.368749 18.3185 0 17.4283 0 16.5ZM16 18V15H3.5C3.10218 15 2.72064 15.158 2.43934 15.4393C2.15804 15.7206 2 16.1022 2 16.5C2 16.8978 2.15804 17.2794 2.43934 17.5607C2.72064 17.842 3.10218 18 3.5 18H16ZM2 13.337C2.46869 13.1144 2.98115 12.9993 3.5 13H16V2H3C2.73478 2 2.48043 2.10536 2.29289 2.29289C2.10536 2.48043 2 2.73478 2 3V13.337Z\",\n    fill: \"#858282\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgLibrarySideNav);\nexport default __webpack_public_path__ + \"static/media/library-side-nav.e0363b1a36a0a4b02efa211cc67d2a7a.svg\";\nexport { ForwardRef as ReactComponent };","import React from \"react\";\nimport styled from \"styled-components\";\nimport explorerIcon from \"assets/icons/header/explorer-side-nav.svg\";\nimport dataIcon from \"assets/icons/header/database-side-nav.svg\";\nimport libIcon from \"assets/icons/header/library-side-nav.svg\";\n\nexport const SIDE_NAV_WIDTH = 55;\n\nconst Container = styled.div`\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: flex-start;\n  width: ${SIDE_NAV_WIDTH}px;\n  display: block;\n\n  background: #ffffff;\n  box-shadow: 1px 0 0 #f1f1f1;\n  height: 100%;\n  border-right: 1px solid #e8e8e8;\n`;\n\nconst Button = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 3px;\n\n  width: ${SIDE_NAV_WIDTH}px;\n  height: 50px;\n\n  /* Grays/White\n\n  White color mostly used on backgrounds. We’re minimal and clean product and we use a lot of white.\n  */\n  background: #ffffff;\n  box-shadow: inset -1px -1px 0px #e8e8e8;\n\n  /* Inside auto layout */\n\n  img {\n    height: 20px;\n    width: 18px;\n  }\n\n  span {\n    /* Explorer */\n    font-style: normal;\n    font-weight: 600;\n    font-size: 8px;\n    line-height: 140%;\n    /* or 11px */\n\n    color: #000000;\n  }\n`;\n\nfunction SideNav() {\n  return (\n    <Container>\n      <Button>\n        <img alt=\"Explorer\" src={explorerIcon} />\n      </Button>\n      <Button>\n        <img alt=\"Datasources\" src={dataIcon} />\n      </Button>\n      <Button>\n        <img alt=\"library\" src={libIcon} />\n      </Button>\n    </Container>\n  );\n}\n\nexport default SideNav;\n","import { getSearchQuery } from \"utils/helpers\";\nimport { Location } from \"history\";\n\nexport const getIsBranchUpdated = (\n  prevLocation: Location<unknown>,\n  currentLocation: Location<unknown>,\n) => {\n  const { search: search1 } = prevLocation;\n  const { search: search2 } = currentLocation;\n\n  const branch1 = getSearchQuery(search1, \"branch\");\n  const branch2 = getSearchQuery(search2, \"branch\");\n\n  return branch1 !== branch2;\n};\n","import { AppState } from \"@appsmith/reducers\";\nimport { AppSettingsPaneReduxState } from \"reducers/uiReducers/appSettingsPaneReducer\";\nimport { createSelector } from \"reselect\";\n\nexport const getAppSettingsPane = (state: AppState) => state.ui.appSettingsPane;\n\nexport const getIsAppSettingsPaneOpen = createSelector(\n  getAppSettingsPane,\n  (appSettingsPane: AppSettingsPaneReduxState) => appSettingsPane.isOpen,\n);\n","import { debounce, get } from \"lodash\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n// import { updateLayoutForMobileBreakpointAction } from \"actions/autoLayoutActions\";\nimport { updateCanvasLayoutAction } from \"actions/editorActions\";\nimport { APP_SETTINGS_PANE_WIDTH } from \"constants/AppConstants\";\nimport {\n  DefaultLayoutType,\n  layoutConfigurations,\n  // MAIN_CONTAINER_WIDGET_ID,\n} from \"constants/WidgetConstants\";\nimport { APP_MODE } from \"entities/App\";\nimport { SIDE_NAV_WIDTH } from \"pages/common/SideNav\";\n// import { AppPositioningTypes } from \"reducers/entityReducers/pageListReducer\";\nimport { getIsAppSettingsPaneOpen } from \"selectors/appSettingsPaneSelectors\";\nimport {\n  getCurrentApplicationLayout,\n  // getCurrentAppPositioningType,\n  getCurrentPageId,\n  getMainCanvasProps,\n  previewModeSelector,\n} from \"selectors/editorSelectors\";\nimport { getAppMode } from \"selectors/entitiesSelector\";\nimport {\n  getExplorerPinned,\n  getExplorerWidth,\n} from \"selectors/explorerSelector\";\nimport { getIsCanvasInitialized } from \"selectors/mainCanvasSelectors\";\nimport {\n  getPaneCount,\n  getTabsPaneWidth,\n  isMultiPaneActive,\n} from \"selectors/multiPaneSelectors\";\nimport { getPropertyPaneWidth } from \"selectors/propertyPaneSelectors\";\nimport { scrollbarWidth } from \"utils/helpers\";\nimport { useWindowSizeHooks } from \"./dragResizeHooks\";\n\nconst BORDERS_WIDTH = 2;\nconst GUTTER_WIDTH = 72;\nexport const AUTOLAYOUT_RESIZER_WIDTH_BUFFER = 40;\n\nexport const useDynamicAppLayout = () => {\n  const dispatch = useDispatch();\n  const explorerWidth = useSelector(getExplorerWidth);\n  const propertyPaneWidth = useSelector(getPropertyPaneWidth);\n  const isExplorerPinned = useSelector(getExplorerPinned);\n  const appMode: APP_MODE | undefined = useSelector(getAppMode);\n  const { width: screenWidth } = useWindowSizeHooks();\n  const mainCanvasProps = useSelector(getMainCanvasProps);\n  const isPreviewMode = useSelector(previewModeSelector);\n  const currentPageId = useSelector(getCurrentPageId);\n  const isCanvasInitialized = useSelector(getIsCanvasInitialized);\n  const appLayout = useSelector(getCurrentApplicationLayout);\n  const isAppSettingsPaneOpen = useSelector(getIsAppSettingsPaneOpen);\n  const tabsPaneWidth = useSelector(getTabsPaneWidth);\n  const isMultiPane = useSelector(isMultiPaneActive);\n  const paneCount = useSelector(getPaneCount);\n  // const appPositioningType = useSelector(getCurrentAppPositioningType);\n\n  // /**\n  //  * calculates min height\n  //  */\n  // const calculatedMinHeight = useMemo(() => {\n  //   return calculateDynamicHeight();\n  // }, [mainCanvasProps]);\n\n  /**\n   * app layout range i.e minWidth and maxWidth for the current layout\n   * if there is no config for the current layout, use default layout i.e desktop\n   */\n  const layoutWidthRange = useMemo(() => {\n    let minWidth = -1;\n    let maxWidth = -1;\n\n    if (appLayout) {\n      const { type } = appLayout;\n      const currentLayoutConfig = get(\n        layoutConfigurations,\n        type,\n        layoutConfigurations[DefaultLayoutType],\n      );\n\n      if (currentLayoutConfig.minWidth) minWidth = currentLayoutConfig.minWidth;\n      if (currentLayoutConfig.maxWidth) maxWidth = currentLayoutConfig.maxWidth;\n    }\n\n    return { minWidth, maxWidth };\n  }, [appLayout]);\n\n  /**\n   * calculate the width for the canvas\n   *\n   * cases:\n   *  - if max width is negative, use calculated width\n   *  - if calculated width is in range of min/max widths of layout, use calculated width\n   *  - if calculated width is less then min width, use min Width\n   *  - if calculated width is larger than max width, use max width\n   *  - by default use min width\n   *\n   * @returns\n   */\n  const calculateCanvasWidth = () => {\n    const { maxWidth, minWidth } = layoutWidthRange;\n    let calculatedWidth = screenWidth - scrollbarWidth();\n\n    // if preview mode is not on and the app setting pane is not opened, we need to subtract the width of the property pane\n    if (\n      isPreviewMode === false &&\n      !isAppSettingsPaneOpen &&\n      appMode === APP_MODE.EDIT\n    ) {\n      calculatedWidth -= propertyPaneWidth;\n    }\n\n    // if app setting pane is open, we need to subtract the width of app setting page width\n    if (isAppSettingsPaneOpen === true && appMode === APP_MODE.EDIT) {\n      calculatedWidth -= APP_SETTINGS_PANE_WIDTH;\n    }\n\n    // if explorer is closed or its preview mode, we don't need to subtract the EE width\n    if (\n      isExplorerPinned === true &&\n      !isPreviewMode &&\n      appMode === APP_MODE.EDIT\n    ) {\n      calculatedWidth -= explorerWidth;\n    }\n\n    if (isMultiPane) {\n      calculatedWidth = screenWidth - scrollbarWidth() - tabsPaneWidth - 100;\n      if (paneCount === 3) calculatedWidth -= propertyPaneWidth;\n    }\n\n    // const ele: any = document.getElementById(\"canvas-viewport\");\n    // if (\n    //   appMode === \"EDIT\" &&\n    //   appLayout?.type === \"FLUID\" &&\n    //   ele &&\n    //   calculatedWidth > ele.clientWidth\n    // ) {\n    //   calculatedWidth = ele.clientWidth;\n    // }\n\n    // if (appPositioningType === AppPositioningTypes.AUTO && isPreviewMode) {\n    //   calculatedWidth -= AUTOLAYOUT_RESIZER_WIDTH_BUFFER;\n    // }\n\n    switch (true) {\n      case maxWidth < 0:\n      case appLayout?.type === \"FLUID\":\n      case calculatedWidth < maxWidth && calculatedWidth > minWidth:\n        const totalWidthToSubtract = BORDERS_WIDTH + GUTTER_WIDTH;\n        // NOTE: gutter + border width will be only substracted when theme mode and preview mode are off\n        return (\n          calculatedWidth -\n          (appMode === APP_MODE.EDIT && !isPreviewMode\n            ? totalWidthToSubtract\n            : 0)\n        );\n      case calculatedWidth < minWidth:\n        return minWidth;\n      case calculatedWidth > maxWidth:\n        return maxWidth;\n      default:\n        return minWidth;\n    }\n  };\n\n  /**\n   * resizes the layout based on the layout type\n   *\n   * @param screenWidth\n   * @param appLayout\n   */\n  const resizeToLayout = () => {\n    const calculatedWidth = calculateCanvasWidth();\n    const { width: rightColumn } = mainCanvasProps || {};\n    let scale = 1;\n    if (isMultiPane && appLayout?.type !== \"FLUID\") {\n      let canvasSpace =\n        screenWidth -\n        tabsPaneWidth -\n        SIDE_NAV_WIDTH -\n        GUTTER_WIDTH -\n        BORDERS_WIDTH;\n      if (paneCount === 3) canvasSpace -= propertyPaneWidth;\n      // Scale will always be between 0.5 to 1\n      scale = Math.max(\n        Math.min(+Math.abs(canvasSpace / calculatedWidth).toFixed(2), 1),\n        0.5,\n      );\n      dispatch(updateCanvasLayoutAction(calculatedWidth, scale));\n    } else if (rightColumn !== calculatedWidth || !isCanvasInitialized) {\n      dispatch(updateCanvasLayoutAction(calculatedWidth, scale));\n    }\n  };\n\n  const debouncedResize = useCallback(debounce(resizeToLayout, 250), [\n    mainCanvasProps,\n    screenWidth,\n    tabsPaneWidth,\n    paneCount,\n  ]);\n\n  // const immediateDebouncedResize = useCallback(debounce(resizeToLayout), [\n  //   mainCanvasProps,\n  //   screenWidth,\n  //   currentPageId,\n  //   appMode,\n  //   appLayout,\n  //   isPreviewMode,\n  // ]);\n\n  // const resizeObserver = new ResizeObserver(immediateDebouncedResize);\n  // useEffect(() => {\n  //   const ele: any = document.getElementById(\"canvas-viewport\");\n  //   if (ele) {\n  //     if (appLayout?.type === \"FLUID\") {\n  //       resizeObserver.observe(ele);\n  //     } else {\n  //       resizeObserver.unobserve(ele);\n  //     }\n  //   }\n  //   return () => {\n  //     ele && resizeObserver.unobserve(ele);\n  //   };\n  // }, [appLayout, currentPageId, isPreviewMode]);\n\n  /**\n   * when screen height is changed, update canvas layout\n   */\n  // useEffect(() => {\n  //   if (calculatedMinHeight !== mainCanvasProps?.height) {\n  //     // dispatch(updateCanvasLayoutAction(mainCanvasProps?.width));\n  //   }\n  // }, [screenHeight, mainCanvasProps?.height]);\n\n  useEffect(() => {\n    if (isCanvasInitialized) debouncedResize();\n  }, [screenWidth, tabsPaneWidth, paneCount]);\n\n  /**\n   * resize the layout if any of the following thing changes:\n   *  - app layout\n   *  - page\n   *  - container right column\n   *  - preview mode\n   *  - explorer width\n   *  - explorer is pinned\n   *  - theme mode is turned on\n   */\n  useEffect(() => {\n    resizeToLayout();\n  }, [\n    appLayout,\n    mainCanvasProps?.width,\n    isPreviewMode,\n    explorerWidth,\n    propertyPaneWidth,\n    isExplorerPinned,\n    propertyPaneWidth,\n    isAppSettingsPaneOpen,\n    currentPageId, //TODO: preet - remove this after first merge.\n  ]);\n\n  // useEffect(() => {\n  //   dispatch(\n  //     updateLayoutForMobileBreakpointAction(\n  //       MAIN_CONTAINER_WIDGET_ID,\n  //       appPositioningType === AppPositioningTypes.AUTO\n  //         ? mainCanvasProps?.isMobile\n  //         : false,\n  //       calculateCanvasWidth(),\n  //     ),\n  //   );\n  // }, [mainCanvasProps?.isMobile, appPositioningType]);\n\n  return isCanvasInitialized;\n};\n","export const CANVAS_WIDGET = '[type=\"CANVAS_WIDGET\"]';\n// NOTE: This is a hack to exclude the current canvas from the query selector\n// because when we use.closest, it returns the current element too\nexport const CANVAS_WIDGET_EXCLUDING_SCOPE =\n  '[type=\"CANVAS_WIDGET\"]:not(:scope)';\nexport const CONTAINER_SELECTOR =\n  \":is(.t--widget-containerwidget, .t--widget-formwidget)\";\nconst NON_FOCUSABLE_WIDGET_CLASS =\n  \".t--widget-textwidget, .t--widget-ratewidget, [disabled], [data-hidden]\";\nexport const JSONFORM_WIDGET = \".t--widget-jsonformwidget\";\nexport const MODAL_WIDGET = \".t--modal-widget\";\nexport const CHECKBOXGROUP_WIDGET = \".t--widget-checkboxgroupwidget\";\nexport const SWITCHGROUP_WIDGET = \".t--widget-switchgroupwidget\";\nexport const BUTTONGROUP_WIDGET = \".t--widget-buttongroupwidget\";\nexport const FOCUS_SELECTOR =\n  \":is(a, input, select, textarea, button, object, audio, video, [tabindex='-1']):not([data-tabbable='false'])\";\nexport const WIDGET_SELECTOR = `.positioned-widget:is(:not(${NON_FOCUSABLE_WIDGET_CLASS}))`;\n\n/**\n * returns the tabbable descendants of the current node\n *\n * @param currentNode\n * @param shiftKey\n * @returns\n */\nexport function getTabbableDescendants(\n  currentNode: HTMLElement,\n  shiftKey = false,\n): HTMLElement[] {\n  const activeWidget = currentNode.closest(WIDGET_SELECTOR) as HTMLElement;\n\n  if (!activeWidget) {\n    const modal = currentNode.closest(MODAL_WIDGET) as HTMLElement;\n\n    // if we are in modal, we have to trap the focus within the modal\n    if (modal) {\n      const tabbableDescendants = Array.from(\n        modal.querySelectorAll(WIDGET_SELECTOR),\n      ) as HTMLElement[];\n\n      const domRect = modal.getBoundingClientRect();\n\n      const sortedTabbableDescendants = sortWidgetsByPosition(\n        {\n          top: shiftKey ? domRect.bottom : domRect.top,\n          left: shiftKey ? domRect.right : domRect.left,\n        },\n        tabbableDescendants,\n        shiftKey,\n      );\n\n      return sortedTabbableDescendants;\n    }\n\n    // this case means the focus on the main container canvas\n    if (currentNode.matches(CANVAS_WIDGET)) {\n      const tabbableDescendants = Array.from(\n        currentNode.querySelectorAll(WIDGET_SELECTOR),\n      ) as HTMLElement[];\n\n      const domRect = currentNode.getBoundingClientRect();\n\n      const sortedTabbableDescendants = sortWidgetsByPosition(\n        {\n          top: shiftKey ? domRect.bottom : domRect.top,\n          left: shiftKey ? domRect.right : domRect.left,\n        },\n        tabbableDescendants,\n        shiftKey,\n      );\n\n      return sortedTabbableDescendants;\n    }\n  }\n\n  const siblings = getWidgetSiblingsOfNode(activeWidget);\n  const domRect = activeWidget.getBoundingClientRect();\n\n  const sortedSiblings = sortWidgetsByPosition(\n    {\n      top: domRect.top,\n      left: domRect.left,\n    },\n    siblings,\n    shiftKey,\n  );\n\n  if (sortedSiblings.length) return sortedSiblings;\n\n  // there are no siblings, which means we are at the end of the tabbable list\n  // we have to go to next sibling widget of current canvas\n  const currentCanvas = currentNode.closest(\n    CANVAS_WIDGET_EXCLUDING_SCOPE,\n  ) as HTMLElement;\n\n  if (currentCanvas) {\n    return getTabbableDescendants(currentCanvas, shiftKey);\n  }\n\n  return [];\n}\n\n/**\n * returns the next tabbable descendant from the list of descendants\n * sorted by position and distance\n * if the next tabbable descendant is JSONFORM, it returns the first tabbable\n *\n * @param descendants\n * @param shiftKey\n * @returns\n */\nexport function getNextTabbableDescendant(\n  descendants: HTMLElement[],\n  shiftKey = false,\n) {\n  const nextTabbableDescendant = descendants[0];\n\n  // if nextTabbableDescendant is a container,\n  if (nextTabbableDescendant.matches(CONTAINER_SELECTOR)) {\n    const tabbableDescendants = getChildrenWidgetsOfNode(\n      nextTabbableDescendant,\n    );\n\n    const {\n      bottom,\n      left,\n      right,\n      top,\n    } = nextTabbableDescendant.getBoundingClientRect();\n\n    const sortedTabbableDescendants = sortWidgetsByPosition(\n      {\n        top: shiftKey ? bottom : top,\n        left: shiftKey ? right : left,\n      },\n      tabbableDescendants,\n      shiftKey,\n    );\n\n    return sortedTabbableDescendants[0];\n  }\n\n  // if nextTabbableDescendant is a jsonform widget\n  if (\n    nextTabbableDescendant.matches(JSONFORM_WIDGET) ||\n    nextTabbableDescendant.matches(CHECKBOXGROUP_WIDGET) ||\n    nextTabbableDescendant.matches(SWITCHGROUP_WIDGET) ||\n    nextTabbableDescendant.matches(BUTTONGROUP_WIDGET)\n  ) {\n    const tabbable = Array.from(\n      nextTabbableDescendant.querySelectorAll<HTMLElement>(FOCUS_SELECTOR),\n    );\n\n    return shiftKey ? tabbable[tabbable.length - 1] : tabbable[0];\n  }\n\n  return nextTabbableDescendant;\n}\n\n/**\n * returns a focussable element within a widget\n *\n * @param node\n * @returns\n */\nexport function getFocussableElementOfWidget(node: HTMLElement) {\n  if (node.matches(FOCUS_SELECTOR)) {\n    return node;\n  }\n\n  return node.querySelector(FOCUS_SELECTOR) as HTMLElement;\n}\n/**\n *  get widgets of a given node\n *\n * @param node\n * @returns\n */\nexport function getChildrenWidgetsOfNode(node: HTMLElement) {\n  const widgets = Array.from(\n    node.querySelectorAll(WIDGET_SELECTOR),\n  ) as HTMLElement[];\n\n  return widgets;\n}\n\n/**\n * get the siblings of the current node's widget\n *\n * @param node\n * @returns\n */\nfunction getWidgetSiblingsOfNode(node: HTMLElement) {\n  const canvas = node.closest(CANVAS_WIDGET_EXCLUDING_SCOPE) as HTMLElement;\n\n  if (!canvas) return [];\n\n  const widget = node.closest(WIDGET_SELECTOR) as HTMLElement;\n  const siblings = Array.from(\n    canvas.querySelectorAll(`:scope > ${WIDGET_SELECTOR}`),\n  ) as HTMLElement[];\n\n  return siblings.filter((sibling) => sibling !== widget);\n}\n\n/**\n * sorts the descendants by their position in the DOM\n *\n * @param currentElement\n * @param tabbableDescendants\n * @param shiftKey\n * @returns\n */\nexport function sortWidgetsByPosition(\n  boundingClientRect: {\n    top: number;\n    left: number;\n  },\n  tabbableDescendants: HTMLElement[],\n  shiftKey = false,\n) {\n  const { left, top } = boundingClientRect;\n  const isTabbingForward = !shiftKey;\n  const isTabbingBackward = shiftKey;\n\n  let tabbableElementsByPosition = Array.from(tabbableDescendants).map(\n    (element) => {\n      const {\n        left: elementLeft,\n        top: elementTop,\n      } = element.getBoundingClientRect();\n      const topDiff = elementTop - top;\n      const leftDiff = elementLeft - left;\n\n      return {\n        element,\n        topDiff,\n        leftDiff,\n        top,\n        left,\n        elementTop,\n        elementLeft,\n      };\n    },\n  );\n\n  tabbableElementsByPosition = tabbableElementsByPosition.filter((element) => {\n    // if tabbing forward, only consider elements below and to the right\n    if (isTabbingForward) {\n      if (element.topDiff === 0) {\n        return element.leftDiff > 0;\n      }\n\n      return element.topDiff > 0;\n    }\n\n    // if tabbing backward, only consider elements above and to the left\n    if (isTabbingBackward) {\n      if (element.topDiff === 0) {\n        return element.leftDiff < 0;\n      }\n\n      return element.topDiff < 0;\n    }\n  });\n\n  tabbableElementsByPosition = tabbableElementsByPosition.sort((a, b) => {\n    if (isTabbingForward) {\n      return a.topDiff - b.topDiff || a.leftDiff - b.leftDiff;\n    }\n\n    if (isTabbingBackward) {\n      return b.topDiff - a.topDiff || b.leftDiff - a.leftDiff;\n    }\n\n    return 0;\n  });\n\n  return tabbableElementsByPosition.map((element) => element.element);\n}\n\n/**\n * get next item to focus if the current widget has relative positioned children\n *\n * Note:\n * if the user is tabbing out, we need to get the next tabbable descendant of the current widget\n * else tabbing will work as expected as widgets inside the widget are regular components\n * and will be handled by the default tabbing logic\n *\n *\n * @param currentWidget\n * @param shiftKey\n * @returns\n */\nexport function getNextTabbableDescendantForRegularWidgets(\n  currentWidget: HTMLElement,\n  shiftKey: boolean,\n) {\n  let nextTabbableDescendant;\n\n  const tabbable = Array.from(\n    currentWidget.querySelectorAll<HTMLElement>(FOCUS_SELECTOR),\n  );\n\n  const currentIndex = tabbable.indexOf(document.activeElement as HTMLElement);\n  const isTabbingOutOfJSONForm = shiftKey\n    ? currentIndex === 0\n    : currentIndex === tabbable.length - 1;\n\n  if (isTabbingOutOfJSONForm) {\n    const descendents = getTabbableDescendants(currentWidget, shiftKey);\n    nextTabbableDescendant = getNextTabbableDescendant(descendents, shiftKey);\n  }\n\n  return nextTabbableDescendant;\n}\n","import {\n  getTabbableDescendants,\n  getNextTabbableDescendant,\n  getFocussableElementOfWidget,\n  JSONFORM_WIDGET,\n  WIDGET_SELECTOR,\n  getNextTabbableDescendantForRegularWidgets,\n  CHECKBOXGROUP_WIDGET,\n  SWITCHGROUP_WIDGET,\n  BUTTONGROUP_WIDGET,\n} from \"./tabbable\";\n\nexport function handleTab(event: KeyboardEvent) {\n  let nextTabbableDescendant;\n  const shiftKey = event.shiftKey;\n  const currentNode = event.target as HTMLElement;\n  const currentWidget = currentNode.closest(WIDGET_SELECTOR) as HTMLElement;\n\n  switch (true) {\n    // when the current node is a widget, we want to do tabbing in regular way\n    // the elements will be in proper order in dom for thes widgets\n    case currentWidget && currentWidget.matches(JSONFORM_WIDGET):\n    case currentWidget && currentWidget.matches(CHECKBOXGROUP_WIDGET):\n    case currentWidget && currentWidget.matches(SWITCHGROUP_WIDGET):\n    case currentWidget && currentWidget.matches(BUTTONGROUP_WIDGET):\n      nextTabbableDescendant = getNextTabbableDescendantForRegularWidgets(\n        currentWidget,\n        shiftKey,\n      );\n      break;\n    default:\n      const tabbable = getTabbableDescendants(currentNode, shiftKey);\n\n      nextTabbableDescendant = getNextTabbableDescendant(tabbable, shiftKey);\n  }\n\n  // if nextTabbableDescendant is found, focus\n  if (nextTabbableDescendant) {\n    event.preventDefault();\n\n    const focusableElement = getFocussableElementOfWidget(\n      nextTabbableDescendant,\n    );\n\n    if (focusableElement) {\n      focusableElement.focus();\n    }\n  }\n}\n","import { useCallback, useEffect, useRef } from \"react\";\n\nimport { handleTab } from \"./handleTab\";\nimport { CANVAS_WIDGET } from \"./tabbable\";\n\nfunction useWidgetFocus(): (instance: HTMLElement | null) => void {\n  const ref = useRef<HTMLElement | null>();\n\n  // This is a callback that will be called when the ref is set\n  const setRef = useCallback((node: HTMLElement | null) => {\n    if (node === null) return;\n\n    if (ref.current === node) return;\n\n    ref.current = node;\n\n    return ref;\n  }, []);\n\n  useEffect(() => {\n    if (!ref.current) return;\n\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (event.key === \"Tab\") handleTab(event);\n    };\n\n    const handleClick = (event: any) => {\n      const target = event.target as HTMLElement;\n      if (target.matches(CANVAS_WIDGET)) {\n        target.focus();\n      }\n    };\n\n    ref.current.addEventListener(\"keydown\", handleKeyDown);\n    ref.current.addEventListener(\"click\", handleClick);\n\n    return () => {\n      ref?.current && ref.current.removeEventListener(\"keydown\", handleKeyDown);\n      ref?.current && ref.current.removeEventListener(\"click\", handleClick);\n    };\n  }, []);\n\n  return setRef;\n}\n\nexport default useWidgetFocus;\n"],"names":["WidgetGlobaStyles","createGlobalStyle","_templateObject","_taggedTemplateLiteral","_ref","primaryColor","_ref2","fontFamily","ModalBody","styled","div","ModalFooter","_templateObject2","RequestConfirmationModal","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","addEventListener","document","onKeyUp","removeEventListener","event","metaKey","ctrlKey","keyCode","Keys","onConfirm","props","modals","modalInfo","dispatch","acceptActionConfirmationModal","name","handleClose","showActionConfirmationModal","_objectSpread","modalOpen","cancelActionConfirmationModal","_createClass","key","value","this","_this2","_this$props","modalsToBeOpened","filter","modal","_jsx","_Fragment","children","map","index","_jsxs","DialogComponent","canEscapeKeyClose","canOutsideClickClose","isOpen","maxHeight","noModalBodyMarginTop","onClose","title","width","createMessage","QUERY_CONFIRMATION_MODAL_MESSAGE","Button","category","Category","secondary","cypressSelector","onClick","size","Size","large","tag","text","type","primary","React","connect","state","ui","modalAction","SIDE_NAV_WIDTH","Container","alt","src","explorerIcon","dataIcon","libIcon","getIsBranchUpdated","prevLocation","currentLocation","search1","search","search2","getSearchQuery","getAppSettingsPane","appSettingsPane","getIsAppSettingsPaneOpen","createSelector","useDynamicAppLayout","useDispatch","explorerWidth","useSelector","getExplorerWidth","propertyPaneWidth","getPropertyPaneWidth","isExplorerPinned","getExplorerPinned","appMode","getAppMode","screenWidth","useWindowSizeHooks","mainCanvasProps","getMainCanvasProps","isPreviewMode","previewModeSelector","currentPageId","getCurrentPageId","isCanvasInitialized","getIsCanvasInitialized","appLayout","getCurrentApplicationLayout","isAppSettingsPaneOpen","tabsPaneWidth","getTabsPaneWidth","isMultiPane","isMultiPaneActive","paneCount","getPaneCount","layoutWidthRange","useMemo","minWidth","maxWidth","currentLayoutConfig","get","layoutConfigurations","DefaultLayoutType","resizeToLayout","calculatedWidth","scrollbarWidth","APP_MODE","EDIT","APP_SETTINGS_PANE_WIDTH","BORDERS_WIDTH","calculateCanvasWidth","rightColumn","scale","canvasSpace","Math","max","min","abs","toFixed","updateCanvasLayoutAction","debouncedResize","useCallback","debounce","useEffect","CANVAS_WIDGET","CANVAS_WIDGET_EXCLUDING_SCOPE","CONTAINER_SELECTOR","JSONFORM_WIDGET","MODAL_WIDGET","CHECKBOXGROUP_WIDGET","SWITCHGROUP_WIDGET","BUTTONGROUP_WIDGET","FOCUS_SELECTOR","WIDGET_SELECTOR","getTabbableDescendants","currentNode","shiftKey","undefined","activeWidget","closest","tabbableDescendants","from","querySelectorAll","domRect","getBoundingClientRect","sortedTabbableDescendants","sortWidgetsByPosition","top","bottom","left","right","matches","siblings","getWidgetSiblingsOfNode","sortedSiblings","currentCanvas","getNextTabbableDescendant","descendants","nextTabbableDescendant","getChildrenWidgetsOfNode","_nextTabbableDescenda","tabbable","node","canvas","widget","sibling","boundingClientRect","isTabbingForward","isTabbingBackward","tabbableElementsByPosition","element","_element$getBoundingC","elementLeft","elementTop","topDiff","leftDiff","sort","a","b","handleTab","target","currentWidget","currentIndex","indexOf","activeElement","getNextTabbableDescendantForRegularWidgets","preventDefault","focusableElement","querySelector","focus","ref","useRef","setRef","current","handleKeyDown","handleClick"],"sourceRoot":""}