{"version":3,"file":"static/js/717.127978bf.chunk.js","mappings":"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","sources":["widgets/DocumentViewerWidget/component/XlsxViewer.tsx"],"sourcesContent":["import React, { useEffect, useState, useRef, useCallback } from \"react\";\nimport styled from \"styled-components\";\nimport Excel from \"exceljs\";\nimport { useTable, Column } from \"react-table\";\nimport _ from \"lodash\";\n\nconst StyledViewer = styled.div`\n  width: 100%;\n  height: 100%;\n  background: #fff;\n  overflow: auto;\n\n  table {\n    border: 1px solid #b0cbef;\n    border-width: 1px 0 0 1px;\n    border-spacing: 0;\n    border-collapse: collapse;\n    padding: 10px;\n\n    th {\n      font-weight: 700;\n      font-size: 14px;\n      border: 1px solid #9eb6ce;\n      border-width: 0 1px 1px 0;\n      height: 17px;\n      line-height: 17px;\n      text-align: center;\n      background: #9eb6ce4d;\n    }\n\n    td {\n      background-color: #fff;\n      padding: 0 4px 0 2px;\n      border: 1px solid #d0d7e5;\n      border-width: 0 1px 1px 0;\n    }\n  }\n`;\n\nconst chars = [\n  \"A\",\n  \"B\",\n  \"C\",\n  \"D\",\n  \"E\",\n  \"F\",\n  \"G\",\n  \"H\",\n  \"I\",\n  \"J\",\n  \"K\",\n  \"L\",\n  \"M\",\n  \"N\",\n  \"O\",\n  \"P\",\n  \"Q\",\n  \"R\",\n  \"S\",\n  \"T\",\n  \"U\",\n  \"V\",\n  \"W\",\n  \"X\",\n  \"Y\",\n  \"Z\",\n];\n\n// get excel column name from index, e.g. A,B,...,AA,AB\nconst numberToExcelHeader = (index: number): string => {\n  index -= 1;\n  const quotient = Math.floor(index / 26);\n  if (quotient > 0) {\n    return numberToExcelHeader(quotient) + chars[index % 26];\n  }\n  return chars[index % 26];\n};\n\ntype sheetsDataType = {\n  name: string;\n  id: number;\n};\n\nexport default function XlsxViewer(props: { blob?: Blob }) {\n  const [sheets, setSheets] = useState([] as sheetsDataType[]);\n  const [tableData, setTableData] = useState([]);\n  const [headerData, setHeaderData] = useState([] as Column[]);\n  const workbook = useRef(new Excel.Workbook());\n\n  useEffect(() => {\n    props.blob?.arrayBuffer().then((buffer) => {\n      // read excel\n      workbook.current.xlsx.load(buffer).then(() => {\n        const newSheets = [] as any;\n        // get all sheets from excel\n        workbook.current.eachSheet((sheet, id) => {\n          newSheets.push({ name: sheet.name, id });\n        });\n        setSheets(newSheets);\n        // get 1st sheet data\n        getSheetData(1);\n      });\n    });\n  }, [props.blob]);\n\n  // get provided sheet data, read all row and columns\n  const getSheetData = useCallback((sheetId: number) => {\n    const worksheet = workbook.current.getWorksheet(sheetId);\n    // collect all row data\n    const data = [] as any;\n    worksheet.eachRow({ includeEmpty: true }, (row) => {\n      const currRow = {} as any;\n      // read value of each cell of current row\n      row.eachCell((cell) => {\n        // value can be merged value | Date | formula result | string | number\n        let value: any;\n        if (cell.isMerged) {\n          value = _.get(cell, \"_mergeCount\") ? cell.value : \"\";\n        } else {\n          value = cell.value;\n        }\n        if (_.isDate(value)) {\n          value = value.toDateString();\n        } else if (_.isObject(value) && _.has(value, \"result\")) {\n          value = _.get(value, \"result\", \"\");\n        }\n        currRow[String(numberToExcelHeader(Number(cell.col)))] = value;\n      });\n      data.push(currRow);\n    });\n    setTableData(data);\n    if (data.length) {\n      // create header letters based on columnCount\n      const newHeader = [];\n      for (let index = 1; index <= worksheet.columnCount; index++) {\n        const currHeader = numberToExcelHeader(index);\n        newHeader.push({\n          Header: currHeader,\n          accessor: currHeader,\n        });\n      }\n      setHeaderData(newHeader);\n    } else {\n      setHeaderData([]);\n    }\n  }, []);\n\n  // when user click on another sheet, re-generate data\n  const updateSheet = useCallback(\n    (sheetId) => () => {\n      getSheetData(sheetId);\n    },\n    [],\n  );\n\n  const {\n    getTableBodyProps,\n    getTableProps,\n    headerGroups,\n    prepareRow,\n    rows,\n  } = useTable({ columns: headerData, data: tableData });\n\n  return (\n    <StyledViewer>\n      <div>\n        {sheets.map((sheet) => (\n          <button key={sheet.id} onClick={updateSheet(sheet.id)}>\n            {sheet.name}\n          </button>\n        ))}\n      </div>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map((headerGroup, hgInd) => (\n            <tr {...headerGroup.getHeaderGroupProps()} key={hgInd}>\n              {headerGroup.headers.map((column, colId) => (\n                <th {...column.getHeaderProps()} key={colId}>\n                  {column.render(\"Header\")}\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, rInd) => {\n            prepareRow(row);\n            return (\n              <tr {...row.getRowProps()} key={rInd}>\n                {row.cells.map((cell, ind) => {\n                  return (\n                    <td {...cell.getCellProps()} key={ind}>\n                      {cell.render(\"Cell\")}\n                    </td>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </StyledViewer>\n  );\n}\n"],"names":["StyledViewer","styled","div","_templateObject","_taggedTemplateLiteral","chars","numberToExcelHeader","index","quotient","Math","floor","XlsxViewer","props","_useState","useState","_useState2","_slicedToArray","sheets","setSheets","_useState3","_useState4","tableData","setTableData","_useState5","_useState6","headerData","setHeaderData","workbook","useRef","Excel","useEffect","_props$blob","blob","arrayBuffer","then","buffer","current","xlsx","load","newSheets","eachSheet","sheet","id","push","name","getSheetData","useCallback","sheetId","worksheet","getWorksheet","data","eachRow","includeEmpty","row","currRow","eachCell","cell","value","isMerged","_","toDateString","String","Number","col","length","newHeader","columnCount","currHeader","Header","accessor","updateSheet","_useTable","useTable","columns","getTableBodyProps","getTableProps","headerGroups","prepareRow","rows","_jsxs","children","_jsx","map","onClick","_objectSpread","headerGroup","hgInd","_createElement","getHeaderGroupProps","key","headers","column","colId","getHeaderProps","render","rInd","getRowProps","cells","ind","getCellProps"],"sourceRoot":""}