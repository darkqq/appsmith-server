{"version":3,"file":"static/js/AppViewer.84bc03cb.chunk.js","mappings":"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","sources":["components/designSystems/appsmith/CenteredWrapper.tsx","pages/AppViewer/AppPage.tsx","pages/AppViewer/AppViewerPageContainer.tsx","utils/hooks/usePrevious.tsx","pages/AppViewer/index.tsx","actions/appViewActions.ts"],"sourcesContent":["import styled from \"styled-components\";\n\nexport default styled.div`\n  height: 100%;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport WidgetFactory from \"utils/WidgetFactory\";\nimport AnalyticsUtil from \"utils/AnalyticsUtil\";\nimport { useDynamicAppLayout } from \"utils/hooks/useDynamicAppLayout\";\nimport { CanvasWidgetStructure } from \"widgets/constants\";\nimport { RenderModes } from \"constants/WidgetConstants\";\n\nconst PageView = styled.div<{ width: number }>`\n  height: 100%;\n  position: relative;\n  width: ${(props) => props.width}px;\n  margin: 0 auto;\n`;\n\ntype AppPageProps = {\n  appName?: string;\n  canvasWidth: number;\n  pageId?: string;\n  pageName?: string;\n  widgetsStructure: CanvasWidgetStructure;\n};\n\nexport function AppPage(props: AppPageProps) {\n  useDynamicAppLayout();\n\n  useEffect(() => {\n    AnalyticsUtil.logEvent(\"PAGE_LOAD\", {\n      pageName: props.pageName,\n      pageId: props.pageId,\n      appName: props.appName,\n      mode: \"VIEW\",\n    });\n  }, [props.pageId, props.pageName]);\n\n  return (\n    <PageView className=\"t--app-viewer-page\" width={props.canvasWidth}>\n      {props.widgetsStructure.widgetId &&\n        WidgetFactory.createWidget(props.widgetsStructure, RenderModes.PAGE)}\n    </PageView>\n  );\n}\n\nexport default AppPage;\n","import React, { useMemo } from \"react\";\nimport { Link, RouteComponentProps, withRouter } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { getIsFetchingPage } from \"selectors/appViewSelectors\";\nimport styled from \"styled-components\";\nimport { AppViewerRouteParams } from \"constants/routes\";\nimport { theme } from \"constants/DefaultTheme\";\nimport { Icon, NonIdealState, Spinner } from \"@blueprintjs/core\";\nimport Centered from \"components/designSystems/appsmith/CenteredWrapper\";\nimport AppPage from \"./AppPage\";\nimport { getCanvasWidth, getCurrentPageName } from \"selectors/editorSelectors\";\nimport RequestConfirmationModal from \"pages/Editor/RequestConfirmationModal\";\nimport { getCurrentApplication } from \"selectors/applicationSelectors\";\nimport {\n  isPermitted,\n  PERMISSION_TYPE,\n} from \"@appsmith/utils/permissionHelpers\";\nimport { builderURL } from \"RouteBuilder\";\nimport { getCanvasWidgetsStructure } from \"selectors/entitiesSelector\";\nimport equal from \"fast-deep-equal/es6\";\n\nconst Section = styled.section`\n  height: 100%;\n  width: 100%;\n  margin: 0 auto;\n  position: relative;\n  overflow-x: auto;\n  overflow-y: auto;\n`;\n\ntype AppViewerPageContainerProps = RouteComponentProps<AppViewerRouteParams>;\n\nfunction AppViewerPageContainer(props: AppViewerPageContainerProps) {\n  const currentPageName = useSelector(getCurrentPageName);\n  const widgetsStructure = useSelector(getCanvasWidgetsStructure, equal);\n  const canvasWidth = useSelector(getCanvasWidth);\n  const isFetchingPage = useSelector(getIsFetchingPage);\n  const currentApplication = useSelector(getCurrentApplication);\n  const { match } = props;\n\n  // get appsmith editr link\n  const appsmithEditorLink = useMemo(() => {\n    if (\n      currentApplication?.userPermissions &&\n      isPermitted(\n        currentApplication?.userPermissions,\n        PERMISSION_TYPE.MANAGE_APPLICATION,\n      )\n    ) {\n      return (\n        <p>\n          Please add widgets to this page in the&nbsp;\n          <Link\n            to={builderURL({\n              pageId: props.match.params.pageId as string,\n            })}\n          >\n            Appsmith Editor\n          </Link>\n        </p>\n      );\n    }\n  }, [currentApplication?.userPermissions]);\n\n  const pageNotFound = (\n    <Centered>\n      <NonIdealState\n        description={appsmithEditorLink}\n        icon={\n          <Icon\n            color={theme.colors.primaryOld}\n            icon=\"page-layout\"\n            iconSize={theme.fontSizes[9]}\n          />\n        }\n        title=\"This page seems to be blank\"\n      />\n    </Centered>\n  );\n\n  const pageLoading = (\n    <Centered>\n      <Spinner />\n    </Centered>\n  );\n\n  if (isFetchingPage) return pageLoading;\n\n  if (!(widgetsStructure.children && widgetsStructure.children.length > 0))\n    return pageNotFound;\n\n  return (\n    <Section>\n      <AppPage\n        appName={currentApplication?.name}\n        canvasWidth={canvasWidth}\n        pageId={match.params.pageId}\n        pageName={currentPageName}\n        widgetsStructure={widgetsStructure}\n      />\n      <RequestConfirmationModal />\n    </Section>\n  );\n}\n\nexport default withRouter(AppViewerPageContainer);\n","import { useEffect, useRef } from \"react\";\n\n// Make sure to use this hook at the start of functional component\nconst usePrevious = <T,>(value: T): T | undefined => {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n};\n\nexport default usePrevious;\n","import React, { useEffect, useState } from \"react\";\nimport styled, { ThemeProvider } from \"styled-components\";\nimport { useDispatch } from \"react-redux\";\nimport { withRouter, RouteComponentProps } from \"react-router\";\nimport { AppState } from \"@appsmith/reducers\";\nimport {\n  AppViewerRouteParams,\n  BuilderRouteParams,\n  GIT_BRANCH_QUERY_KEY,\n} from \"constants/routes\";\nimport {\n  getIsInitialized,\n  getAppViewHeaderHeight,\n} from \"selectors/appViewSelectors\";\nimport EditorContextProvider from \"components/editorComponents/EditorContextProvider\";\nimport AppViewerPageContainer from \"./AppViewerPageContainer\";\nimport { editorInitializer } from \"utils/editor/EditorUtils\";\nimport * as Sentry from \"@sentry/react\";\nimport { getViewModePageList } from \"selectors/editorSelectors\";\nimport { getThemeDetails, ThemeMode } from \"selectors/themeSelectors\";\nimport webfontloader from \"webfontloader\";\nimport { getSearchQuery } from \"utils/helpers\";\nimport { getSelectedAppTheme } from \"selectors/appThemingSelectors\";\nimport { useSelector } from \"react-redux\";\nimport BrandingBadge from \"./BrandingBadge\";\nimport { setAppViewHeaderHeight } from \"actions/appViewActions\";\nimport { showPostCompletionMessage } from \"selectors/onboardingSelectors\";\nimport { CANVAS_SELECTOR } from \"constants/WidgetConstants\";\nimport { fetchPublishedPage } from \"actions/pageActions\";\nimport usePrevious from \"utils/hooks/usePrevious\";\nimport { getIsBranchUpdated } from \"../utils\";\nimport { APP_MODE } from \"entities/App\";\nimport { initAppViewer } from \"actions/initActions\";\nimport { WidgetGlobaStyles } from \"globalStyles/WidgetGlobalStyles\";\nimport { getAppsmithConfigs } from \"@appsmith/configs\";\nimport useWidgetFocus from \"utils/hooks/useWidgetFocus/useWidgetFocus\";\n\nconst AppViewerBody = styled.section<{\n  hasPages: boolean;\n  headerHeight: number;\n  showGuidedTourMessage: boolean;\n}>`\n  display: flex;\n  flex-direction: row;\n  align-items: stretch;\n  justify-content: flex-start;\n  height: calc(100vh - ${({ headerHeight }) => headerHeight}px);\n  --view-mode-header-height: ${({ headerHeight }) => headerHeight}px;\n`;\n\nconst AppViewerBodyContainer = styled.div<{\n  width?: string;\n  backgroundColor: string;\n}>`\n  flex: 1;\n  overflow: auto;\n  margin: 0 auto;\n  background: ${({ backgroundColor }) => backgroundColor};\n`;\n\nexport type AppViewerProps = RouteComponentProps<BuilderRouteParams>;\n\ntype Props = AppViewerProps & RouteComponentProps<AppViewerRouteParams>;\n\nconst DEFAULT_FONT_NAME = \"System Default\";\n\nfunction AppViewer(props: Props) {\n  const dispatch = useDispatch();\n  const { pathname, search } = props.location;\n  const { applicationId, pageId } = props.match.params;\n  const [registered, setRegistered] = useState(false);\n  const isInitialized = useSelector(getIsInitialized);\n  const pages = useSelector(getViewModePageList);\n  const selectedTheme = useSelector(getSelectedAppTheme);\n  const lightTheme = useSelector((state: AppState) =>\n    getThemeDetails(state, ThemeMode.LIGHT),\n  );\n  const showGuidedTourMessage = useSelector(showPostCompletionMessage);\n  const headerHeight = useSelector(getAppViewHeaderHeight);\n  const branch = getSearchQuery(search, GIT_BRANCH_QUERY_KEY);\n  const prevValues = usePrevious({ branch, location: props.location, pageId });\n  const { hideWatermark } = getAppsmithConfigs();\n\n  const focusRef = useWidgetFocus();\n\n  /**\n   * initializes the widgets factory and registers all widgets\n   */\n  useEffect(() => {\n    editorInitializer().then(() => {\n      setRegistered(true);\n    });\n\n    // onMount initPage\n    if (applicationId || pageId) {\n      dispatch(\n        initAppViewer({\n          applicationId,\n          branch,\n          pageId,\n          mode: APP_MODE.PUBLISHED,\n        }),\n      );\n    }\n  }, []);\n\n  /**\n   * initialize the app if branch, pageId or application is changed\n   */\n  useEffect(() => {\n    const prevBranch = prevValues?.branch;\n    const prevLocation = prevValues?.location;\n    const prevPageId = prevValues?.pageId;\n    let isBranchUpdated = false;\n    if (prevBranch && prevLocation) {\n      isBranchUpdated = getIsBranchUpdated(props.location, prevLocation);\n    }\n\n    const isPageIdUpdated = pageId !== prevPageId;\n\n    if (prevBranch && isBranchUpdated && (applicationId || pageId)) {\n      dispatch(\n        initAppViewer({\n          applicationId,\n          branch,\n          pageId,\n          mode: APP_MODE.PUBLISHED,\n        }),\n      );\n    } else {\n      /**\n       * First time load is handled by init sagas\n       * If we don't check for `prevPageId`: fetch page is retriggered\n       * when redirected to the default page\n       */\n      if (prevPageId && pageId && isPageIdUpdated) {\n        dispatch(fetchPublishedPage(pageId, true));\n      }\n    }\n  }, [branch, pageId, applicationId, pathname]);\n\n  useEffect(() => {\n    const header = document.querySelector(\".js-appviewer-header\");\n\n    dispatch(setAppViewHeaderHeight(header?.clientHeight || 0));\n  }, [pages.length, isInitialized]);\n\n  /**\n   * returns the font to be used for the canvas\n   */\n  const appFontFamily =\n    selectedTheme.properties.fontFamily.appFont === DEFAULT_FONT_NAME\n      ? \"inherit\"\n      : selectedTheme.properties.fontFamily.appFont;\n\n  /**\n   * loads font for canvas based on theme\n   */\n  useEffect(() => {\n    if (selectedTheme.properties.fontFamily.appFont !== DEFAULT_FONT_NAME) {\n      webfontloader.load({\n        google: {\n          families: [\n            `${selectedTheme.properties.fontFamily.appFont}:300,400,500,700`,\n          ],\n        },\n      });\n    }\n\n    document.body.style.fontFamily = appFontFamily;\n\n    return function reset() {\n      document.body.style.fontFamily = \"inherit\";\n    };\n  }, [selectedTheme.properties.fontFamily.appFont]);\n\n  return (\n    <ThemeProvider theme={lightTheme}>\n      <EditorContextProvider renderMode=\"PAGE\">\n        <WidgetGlobaStyles\n          fontFamily={selectedTheme.properties.fontFamily.appFont}\n          primaryColor={selectedTheme.properties.colors.primaryColor}\n        />\n        <AppViewerBodyContainer\n          backgroundColor={selectedTheme.properties.colors.backgroundColor}\n        >\n          <AppViewerBody\n            className={CANVAS_SELECTOR}\n            hasPages={pages.length > 1}\n            headerHeight={headerHeight}\n            ref={focusRef}\n            showGuidedTourMessage={showGuidedTourMessage}\n          >\n            {isInitialized && registered && <AppViewerPageContainer />}\n          </AppViewerBody>\n          {!hideWatermark && (\n            <a\n              className=\"fixed hidden right-8 bottom-4 z-3 hover:no-underline md:flex\"\n              href=\"https://appsmith.com\"\n              rel=\"noreferrer\"\n              target=\"_blank\"\n            >\n              <BrandingBadge />\n            </a>\n          )}\n        </AppViewerBodyContainer>\n      </EditorContextProvider>\n    </ThemeProvider>\n  );\n}\n\nexport default withRouter(Sentry.withProfiler(AppViewer));\n","import { ReduxActionTypes } from \"@appsmith/constants/ReduxActionConstants\";\n\n/**\n * ----------------------------------------------------------------------------\n * ACTIONS\n * ----------------------------------------------------------------------------\n */\n\n/**\n * set app view header height\n *\n * @param mode\n * @returns\n */\nexport const setAppViewHeaderHeight = (height: number) => ({\n  type: ReduxActionTypes.SET_APP_VIEWER_HEADER_HEIGHT,\n  payload: height,\n});\n"],"names":["styled","div","_templateObject","_taggedTemplateLiteral","PageView","props","width","useDynamicAppLayout","useEffect","AnalyticsUtil","logEvent","pageName","pageId","appName","mode","_jsx","className","canvasWidth","children","widgetsStructure","widgetId","WidgetFactory","createWidget","RenderModes","PAGE","Section","section","withRouter","currentPageName","useSelector","getCurrentPageName","getCanvasWidgetsStructure","equal","getCanvasWidth","isFetchingPage","getIsFetchingPage","currentApplication","getCurrentApplication","match","appsmithEditorLink","useMemo","userPermissions","isPermitted","PERMISSION_TYPE","MANAGE_APPLICATION","_jsxs","Link","to","builderURL","params","pageNotFound","Centered","NonIdealState","description","icon","Icon","color","theme","colors","primaryOld","iconSize","fontSizes","title","pageLoading","Spinner","length","AppPage","name","RequestConfirmationModal","value","ref","useRef","current","AppViewerBody","_ref","headerHeight","_ref2","AppViewerBodyContainer","_templateObject2","_ref3","backgroundColor","DEFAULT_FONT_NAME","Sentry","dispatch","useDispatch","_props$location","location","pathname","search","_props$match$params","applicationId","_useState","useState","_useState2","_slicedToArray","registered","setRegistered","isInitialized","getIsInitialized","pages","getViewModePageList","selectedTheme","getSelectedAppTheme","lightTheme","state","getThemeDetails","ThemeMode","LIGHT","showGuidedTourMessage","showPostCompletionMessage","getAppViewHeaderHeight","branch","getSearchQuery","GIT_BRANCH_QUERY_KEY","prevValues","usePrevious","hideWatermark","getAppsmithConfigs","focusRef","useWidgetFocus","editorInitializer","then","initAppViewer","APP_MODE","PUBLISHED","prevBranch","prevLocation","prevPageId","isBranchUpdated","getIsBranchUpdated","isPageIdUpdated","fetchPublishedPage","height","header","document","querySelector","clientHeight","type","ReduxActionTypes","SET_APP_VIEWER_HEADER_HEIGHT","payload","appFontFamily","properties","fontFamily","appFont","webfontloader","google","families","concat","body","style","ThemeProvider","EditorContextProvider","renderMode","WidgetGlobaStyles","primaryColor","CANVAS_SELECTOR","hasPages","AppViewerPageContainer","href","rel","target","BrandingBadge"],"sourceRoot":""}