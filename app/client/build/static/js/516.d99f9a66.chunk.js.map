{"version":3,"file":"static/js/516.d99f9a66.chunk.js","mappings":"mPAKMA,EAAeC,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,mFAMhB,SAASC,EAAUC,GAChC,IAAAC,GAA0BC,EAAAA,EAAAA,UAAS,CAAEC,WAAW,EAAOC,SAAS,IAAQC,GAAAC,EAAAA,EAAAA,GAAAL,EAAA,GAAjEM,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,GAAsCP,EAAAA,EAAAA,UAAS,IAAGQ,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA3CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GA2BlC,OAzBAG,EAAAA,EAAAA,YAAU,WAAO,IAADC,EACdN,EAAS,CAAEL,WAAW,EAAMC,SAAS,IACrCQ,EAAe,IACL,QAAVE,EAAAd,EAAMe,YAAI,IAAAD,GAAVA,EACIE,cACDC,MAAK,SAACC,GACLC,IAAAA,cAEI,CAAEH,YAAaE,GACf,CAAEE,yBAAyB,EAAMC,wBAAwB,IAE1DJ,MAAK,SAACK,GACLd,EAAS,CAAEL,WAAW,EAAOC,SAAS,IACtCQ,EAAeU,EAAOC,MACxB,IACCC,OAAM,WACLZ,EAAe,IACfJ,EAAS,CAAEL,WAAW,EAAOC,SAAS,GACxC,GACJ,IACCoB,OAAM,WACLhB,EAAS,CAAEL,WAAW,EAAOC,SAAS,IACtCQ,EAAe,GACjB,GACJ,GAAG,CAACZ,EAAMe,QAERU,EAAAA,EAAAA,MAAC/B,EAAY,CAAAgC,SAAA,EACXC,EAAAA,EAAAA,KAACC,EAAAA,GAAU,CAACC,QAASlB,IACpBJ,EAAMJ,WACLwB,EAAAA,EAAAA,KAAA,OAAAD,SAAK,eACHnB,EAAMH,SACRuB,EAAAA,EAAAA,KAAA,OAAAD,SAAK,iCAELC,EAAAA,EAAAA,KAAA,YAIR,C","sources":["widgets/DocumentViewerWidget/component/DocViewer.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport mammoth from \"mammoth/mammoth.browser\";\nimport styled from \"styled-components\";\nimport Interweave from \"interweave\";\n\nconst StyledViewer = styled.div`\n  width: 100%;\n  height: 100%;\n  background: #fff;\n  overflow: auto;\n`;\nexport default function DocViewer(props: { blob?: Blob }) {\n  const [state, setState] = useState({ isLoading: false, isError: false });\n  const [htmlContent, setHtmlContent] = useState(\"\");\n  // when DocViewer gets new Blob of uploaded file convert it to html for preview\n  useEffect(() => {\n    setState({ isLoading: true, isError: false });\n    setHtmlContent(\"\");\n    props.blob\n      ?.arrayBuffer()\n      .then((buffer) => {\n        mammoth\n          .convertToHtml(\n            { arrayBuffer: buffer },\n            { includeEmbeddedStyleMap: true, includeDefaultStyleMap: true },\n          )\n          .then((result: { value: string }) => {\n            setState({ isLoading: false, isError: false });\n            setHtmlContent(result.value);\n          })\n          .catch(() => {\n            setHtmlContent(\"\");\n            setState({ isLoading: false, isError: true });\n          });\n      })\n      .catch(() => {\n        setState({ isLoading: false, isError: false });\n        setHtmlContent(\"\");\n      });\n  }, [props.blob]);\n  return (\n    <StyledViewer>\n      <Interweave content={htmlContent} />\n      {state.isLoading ? (\n        <div>Loading...</div>\n      ) : state.isError ? (\n        <div>Failed to read docx content</div>\n      ) : (\n        <div />\n      )}\n    </StyledViewer>\n  );\n}\n"],"names":["StyledViewer","styled","div","_templateObject","_taggedTemplateLiteral","DocViewer","props","_useState","useState","isLoading","isError","_useState2","_slicedToArray","state","setState","_useState3","_useState4","htmlContent","setHtmlContent","useEffect","_props$blob","blob","arrayBuffer","then","buffer","mammoth","includeEmbeddedStyleMap","includeDefaultStyleMap","result","value","catch","_jsxs","children","_jsx","Interweave","content"],"sourceRoot":""}