{"version":3,"file":"static/js/mapCharts.46c92360.chunk.js","mappings":"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","sources":["widgets/MapChartWidget/CustomMapConstants.ts","widgets/MapChartWidget/component/index.tsx"],"sourcesContent":["export const CUSTOM_MAP_PLUGINS: Record<string, any> = {\n  world: require(`fusionmaps/maps/fusioncharts.world.js`),\n  worldwithantarctica: require(`fusionmaps/maps/fusioncharts.worldwithantarctica.js`),\n  europe: require(`fusionmaps/maps/fusioncharts.europe.js`),\n  northamerica: require(`fusionmaps/maps/fusioncharts.northamerica.js`),\n  southamerica: require(`fusionmaps/maps/fusioncharts.southamerica.js`),\n  asia: require(`fusionmaps/maps/fusioncharts.asia.js`),\n  oceania: require(`fusionmaps/maps/fusioncharts.oceania.js`),\n  africa: require(`fusionmaps/maps/fusioncharts.africa.js`),\n  usa: require(`fusionmaps/maps/fusioncharts.usa.js`),\n};\n\nexport const CUSTOM_MAP_TYPES = Object.keys(CUSTOM_MAP_PLUGINS).map(\n  (each) => `maps/${each}`,\n);\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n// Include the react-fusioncharts component\nimport ReactFC from \"react-fusioncharts\";\n// Include the fusioncharts library\nimport FusionCharts, { ChartObject } from \"fusioncharts\";\n\n// Import FusionMaps\nimport FusionMaps from \"fusioncharts/fusioncharts.maps\";\nimport World from \"fusioncharts/maps/fusioncharts.world\";\nimport USA from \"fusioncharts/maps/fusioncharts.usa\";\n\n// Include the theme as fusion\nimport FusionTheme from \"fusioncharts/themes/fusioncharts.theme.fusion\";\n\n// Import the dataset and the colorRange of the map\nimport { dataSetForWorld, MapTypes, MapColorObject } from \"../constants\";\nimport { CUSTOM_MAP_PLUGINS } from \"../CustomMapConstants\";\nimport { Colors } from \"constants/Colors\";\n\n// Adding the chart and theme as dependency to the core fusioncharts\nReactFC.fcRoot(FusionCharts, FusionMaps, World, FusionTheme, USA);\n\nconst MapChartContainer = styled.div<{\n  borderRadius?: string;\n  boxShadow?: string;\n}>`\n  display: flex;\n  height: 100%;\n  width: 100%;\n  background: white;\n  border-radius: ${({ borderRadius }) => borderRadius};\n  box-shadow: ${({ boxShadow }) => `${boxShadow}`};\n  overflow: hidden;\n\n  & > div {\n    width: 100%;\n  }\n`;\n\nexport interface MapData {\n  value?: string;\n  displayValue?: string;\n  toolText?: string;\n  color?: string;\n  alpha?: number;\n  link?: string;\n  font?: string;\n  fontSize?: string;\n  fontColor?: string;\n  fontBold?: boolean;\n  showLabel?: boolean;\n  showToolTip?: boolean;\n  labelConnectorColor?: string;\n  labelConnectorAlpha?: number;\n  useHoverColor?: boolean;\n}\n\nexport type MapType = keyof typeof MapTypes;\n\nexport interface EntityData {\n  id: string;\n  label: string;\n  originalId: string;\n  shortLabel: string;\n  value: number;\n}\n\nfunction MapChartComponent(props: MapChartComponentProps) {\n  const {\n    caption,\n    colorRange,\n    data,\n    onDataPointClick,\n    showLabels,\n    type,\n  } = props;\n\n  const fontFamily =\n    props.fontFamily === \"System Default\" ? \"inherit\" : props.fontFamily;\n\n  // Creating the JSON object to store the chart configurations\n  const defaultChartConfigs: ChartObject = {\n    type: \"maps/world\", // The chart type\n    width: \"100%\", // Width of the chart\n    height: \"100%\", // Height of the chart\n    dataFormat: \"json\", // Data type\n    dataSource: {\n      // Map Configuration\n      chart: {\n        caption: \"Average Annual Population Growth\",\n        includevalueinlabels: \"1\",\n        labelsepchar: \": \",\n        entityFillHoverColor: \"#FFF9C4\",\n        theme: \"fusion\",\n\n        // Caption\n        captionFontSize: \"24\",\n        captionAlignment: \"center\",\n        captionPadding: \"20\",\n        captionFontColor: Colors.THUNDER,\n        captionFontBold: \"1\",\n\n        // Legend\n        legendIconSides: \"4\",\n        legendIconBgAlpha: \"100\",\n        legendIconAlpha: \"100\",\n        legendItemFont: fontFamily,\n        legendPosition: \"top\",\n        valueFont: fontFamily,\n\n        // Spacing\n        chartLeftMargin: \"10\",\n        chartTopMargin: \"15\",\n        chartRightMargin: \"10\",\n        chartBottomMargin: \"10\",\n\n        // Base Styling\n        baseFont: fontFamily,\n        bgColor: Colors.WHITE,\n      },\n      // Aesthetics; ranges synced with the slider\n      colorRange: {\n        gradient: \"0\",\n      },\n      // Source data as JSON --> id represents countries of the world.\n      data: dataSetForWorld,\n    },\n    events: {},\n  };\n\n  const [chartConfigs, setChartConfigs] = useState(defaultChartConfigs);\n  const [chart, setChart] = useState(new FusionCharts(defaultChartConfigs));\n\n  useEffect(() => {\n    // Attach event handlers\n    const newChartConfigs: any = {\n      ...chartConfigs,\n    };\n    newChartConfigs[\"events\"][\"entityClick\"] = onDataPointClick;\n    setChartConfigs(newChartConfigs);\n\n    return () => {\n      chart.removeEventListener(\"entityClick\", onDataPointClick);\n    };\n  }, [onDataPointClick]);\n\n  useEffect(() => {\n    const newChartConfigs: any = {\n      ...chartConfigs,\n    };\n    const fontFamily =\n      props.fontFamily === \"System Default\" ? \"inherit\" : props.fontFamily;\n\n    newChartConfigs[\"dataSource\"][\"chart\"][\"legendItemFont\"] = fontFamily;\n    newChartConfigs[\"dataSource\"][\"chart\"][\"valueFont\"] = fontFamily;\n    newChartConfigs[\"dataSource\"][\"chart\"][\"baseFont\"] = fontFamily;\n\n    setChartConfigs(newChartConfigs);\n  }, [props.fontFamily]);\n\n  useEffect(() => {\n    const newChartConfigs: any = {\n      ...chartConfigs,\n    };\n    newChartConfigs[\"dataSource\"][\"chart\"][\"caption\"] = caption;\n    setChartConfigs(newChartConfigs);\n  }, [caption]);\n\n  useEffect(() => {\n    const targetValue = showLabels ? \"1\" : \"0\";\n\n    const newChartConfigs: any = {\n      ...chartConfigs,\n    };\n    newChartConfigs[\"dataSource\"][\"chart\"][\"showLabels\"] = targetValue;\n    setChartConfigs(newChartConfigs);\n  }, [showLabels]);\n\n  useEffect(() => {\n    const newChartConfigs: any = {\n      ...chartConfigs,\n    };\n    newChartConfigs[\"dataSource\"][\"colorRange\"][\"color\"] = colorRange;\n    chart.setChartData(newChartConfigs.dataSource, \"json\");\n  }, [JSON.stringify(colorRange)]);\n\n  useEffect(() => {\n    const newChartConfigs = {\n      ...chartConfigs,\n      dataSource: {\n        ...(chartConfigs.dataSource || {}),\n        data,\n      },\n    };\n\n    switch (type) {\n      case MapTypes.WORLD_WITH_ANTARCTICA:\n        newChartConfigs.type = \"maps/worldwithantarctica\";\n        break;\n      case MapTypes.EUROPE:\n        newChartConfigs.type = \"maps/europe\";\n        break;\n      case MapTypes.NORTH_AMERICA:\n        newChartConfigs.type = \"maps/northamerica\";\n        break;\n      case MapTypes.SOURTH_AMERICA:\n        newChartConfigs.type = \"maps/southamerica\";\n        break;\n      case MapTypes.ASIA:\n        newChartConfigs.type = \"maps/asia\";\n        break;\n      case MapTypes.OCEANIA:\n        newChartConfigs.type = \"maps/oceania\";\n        break;\n      case MapTypes.AFRICA:\n        newChartConfigs.type = \"maps/africa\";\n        break;\n      case MapTypes.USA:\n        newChartConfigs.type = \"maps/usa\";\n        break;\n\n      default:\n        newChartConfigs.type = \"maps/world\";\n        break;\n    }\n\n    if (type === MapTypes.WORLD) {\n      setChartConfigs(newChartConfigs);\n      return;\n    }\n\n    initializeMap(newChartConfigs);\n  }, [JSON.stringify(data), type]);\n\n  // Called by FC-React component to return the rendered chart\n  const renderComplete = (chart: FusionCharts.FusionCharts) => {\n    setChart(chart);\n  };\n\n  const initializeMap = (configs: ChartObject) => {\n    const { type: mapType } = configs;\n    if (mapType) {\n      const alias = mapType.substring(5);\n      const mapDefinition = CUSTOM_MAP_PLUGINS[alias];\n      ReactFC.fcRoot(FusionCharts, FusionMaps, mapDefinition, FusionTheme);\n      setChartConfigs(configs);\n    }\n  };\n\n  return (\n    <MapChartContainer\n      borderRadius={props.borderRadius}\n      boxShadow={props.boxShadow}\n    >\n      <ReactFC {...chartConfigs} onRender={renderComplete} />\n    </MapChartContainer>\n  );\n}\n\nexport interface MapChartComponentProps {\n  caption: string;\n  colorRange: MapColorObject[];\n  data: MapData[];\n  isVisible: boolean;\n  onDataPointClick: (evt: any) => void;\n  showLabels: boolean;\n  type: MapType;\n  borderRadius?: string;\n  boxShadow?: string;\n  fontFamily?: string;\n}\n\nexport default MapChartComponent;\n"],"names":["CUSTOM_MAP_PLUGINS","world","require","worldwithantarctica","europe","northamerica","southamerica","asia","oceania","africa","usa","Object","keys","map","each","concat","ReactFC","fcRoot","FusionCharts","FusionMaps","World","FusionTheme","USA","MapChartContainer","styled","div","_templateObject","_taggedTemplateLiteral","_ref","borderRadius","_ref2","boxShadow","props","caption","colorRange","data","onDataPointClick","showLabels","type","fontFamily","defaultChartConfigs","width","height","dataFormat","dataSource","chart","includevalueinlabels","labelsepchar","entityFillHoverColor","theme","captionFontSize","captionAlignment","captionPadding","captionFontColor","Colors","THUNDER","captionFontBold","legendIconSides","legendIconBgAlpha","legendIconAlpha","legendItemFont","legendPosition","valueFont","chartLeftMargin","chartTopMargin","chartRightMargin","chartBottomMargin","baseFont","bgColor","WHITE","gradient","dataSetForWorld","events","_useState","useState","_useState2","_slicedToArray","chartConfigs","setChartConfigs","_useState3","_useState4","setChart","useEffect","newChartConfigs","_objectSpread","removeEventListener","targetValue","setChartData","JSON","stringify","MapTypes","WORLD_WITH_ANTARCTICA","EUROPE","NORTH_AMERICA","SOURTH_AMERICA","ASIA","OCEANIA","AFRICA","WORLD","initializeMap","configs","mapType","alias","substring","mapDefinition","_jsx","children","onRender"],"sourceRoot":""}